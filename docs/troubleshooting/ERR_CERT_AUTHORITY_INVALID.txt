This net::ERR_CERT_AUTHORITY_INVALID error you're seeing in your Angular app, even though Postman works, is a common problem when dealing with self-signed SSL certificates or certificates issued by an untrusted certificate authority in a development environment.

Here's why you're encountering this and what you can do about it:

Why It Happens
Browser Security: Web browsers (like Chrome, Firefox, Edge) are very strict about security. When your Angular app tries to make an HTTPS request to https://localhost:8443, the browser receives an SSL certificate from your backend. If this certificate isn't issued by a trusted Certificate Authority (CA) that the browser recognizes (which is usually the case with self-signed certificates or those from internal CAs in development), the browser throws a ERR_CERT_AUTHORITY_INVALID error and blocks the connection. It does this to protect you from potential man-in-the-middle attacks.

Postman's Leniency: Postman, by default, is often more lenient with SSL certificate validation. It usually has an option to disable SSL certificate verification (or it might be disabled by default), which allows it to connect to endpoints with untrusted certificates without throwing an error. This is why your request works in Postman but not in your browser.

Solutions
Here are the most common ways to solve this problem, ranging from quick fixes (for development) to more robust solutions:

1. (Recommended for Development) Allow Insecure Connections in Your Browser
This is the quickest way to get your Angular app working with your local backend during development:

Directly Access the Backend URL: Open a new tab in your browser and navigate directly to your backend's login URL: https://localhost:8443/api/auth/login (or simply https://localhost:8443).

Accept the Risk: Your browser will likely display a warning page (e.g., "Your connection is not private"). Look for an option like "Advanced," "Proceed to localhost (unsafe)," or "Accept the risk and continue." Clicking this will tell your browser to temporarily trust the certificate for that specific domain. Once you do this, your Angular application running in another tab should be able to make requests to https://localhost:8443 without the ERR_CERT_AUTHORITY_INVALID error.

Note: You might need to do this again if you clear your browser's cache or restart your browser.

2. Configure Your Backend to Use a Trusted Certificate
This is a more robust solution, but it requires more setup on your backend:

Generate a Trusted Self-Signed Certificate (for local development): Tools like mkcert or OpenSSL can help you generate self-signed certificates that your operating system can be configured to trust. This involves adding the generated certificate to your system's trusted root certificates.

mkcert: This is a very easy-to-use tool for creating locally trusted development certificates.

Install mkcert (e.g., using Homebrew: brew install mkcert).

Run mkcert -install to install the local CA.

Run mkcert localhost 127.0.0.1 ::1 to generate certificates for localhost.

Configure your backend to use these newly generated certificate files.

Obtain a Real SSL Certificate (for production or more serious staging): If you're moving beyond pure local development, you'd typically get a real SSL certificate from a trusted CA like Let's Encrypt (free) or a commercial provider. This requires a publicly accessible domain name.

3. Disable SSL Verification in Angular (Not Recommended for Production)
While technically possible, modifying your Angular application to ignore SSL errors is highly discouraged, especially for anything beyond very temporary debugging, as it completely undermines the security benefits of HTTPS. There's no direct built-in way in Angular's HttpClient to simply "ignore" SSL errors at the client level because the browser enforces this security.

Which Solution Should You Choose?
For active local development where you frequently restart your backend or make changes: Solution 1 (Allow Insecure Connections in Your Browser) is usually the quickest and most practical.

For a slightly more persistent local development setup where you want your browser to "just work" without constant manual acceptance: Solution 2 (Using mkcert) is an excellent choice.

For staging or production environments: You must use a properly obtained and configured SSL certificate from a trusted Certificate Authority (like Let's Encrypt).